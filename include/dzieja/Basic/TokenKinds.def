//-----------------------------------------------------------------------------------*- C++ -*----//
///
/// Contains enumeration of all tokens.
///
/// Pay attention to order of token declarations! It can influences on resulting kind of a token in
/// case if the token matches to two and more sequences. For example, word \c type corresponds to
/// kind \p identifier and \p keyword, ans since the \p type keyword is declared earlier, the \p
/// type word will have kind \c kw_type, not \c identifier.
///
//------------------------------------------------------------------------------------------------//

#ifndef TOK
#define TOK(name)
#endif
#ifndef TOKEN
#define TOKEN(name, str) TOK(name)
#endif
#ifndef TOKEN_REGEX
#define TOKEN_REGEX(name, regex) TOK(name)
#endif
#ifndef KEYWORD
#define KEYWORD(name) TOKEN(kw_##name, #name)
#endif
#ifndef PUNCTUATOR
#define PUNCTUATOR(name, str) TOKEN(name, str)
#endif

TOK(unknown)

KEYWORD(i8)
KEYWORD(i16)
KEYWORD(i32)
KEYWORD(i64)
KEYWORD(int)
KEYWORD(u8)
KEYWORD(u16)
KEYWORD(u32)
KEYWORD(u64)
KEYWORD(uint)
KEYWORD(type)

PUNCTUATOR(l_brace, "{")
PUNCTUATOR(r_brace, "}")
PUNCTUATOR(l_paren, "(")
PUNCTUATOR(r_paren, ")")
PUNCTUATOR(l_square, "[")
PUNCTUATOR(r_square, "]")
PUNCTUATOR(period, ".")

#undef PUNCTUATOR
#undef KEYWORD
#undef TOKEN_REGEX
#undef TOKEN
#undef TOK
