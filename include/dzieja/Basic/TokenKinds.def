//-----------------------------------------------------------------------------------*- C++ -*----//
///
/// Contains enumeration of all tokens.
///
/// Pay attention to order of token declarations! It can influence on resulting kind of a token in
/// case if the token matches to two and more sequences. For example, word \c type corresponds to
/// kind \p identifier and \p keyword, and since the \p type keyword is declared earlier, the \p
/// type word will have kind \c kw_type, not \c identifier.
///
//------------------------------------------------------------------------------------------------//

#ifndef TOK
#define TOK(name)
#endif
#ifndef TOKEN
#define TOKEN(name, str) TOK(name)
#endif
#ifndef TOKEN_REGEX
#define TOKEN_REGEX(name, regex) TOK(name)
#endif
#ifndef KEYWORD
#define KEYWORD(name) TOKEN(kw_##name, #name)
#endif
#ifndef PUNCTUATOR
#define PUNCTUATOR(name, str) TOKEN(name, str)
#endif

TOK(unknown)
TOKEN_REGEX(eof, R"(\0)")

// integer types corresponding to C/C++ analogs
KEYWORD(byte)
KEYWORD(ubyte)
KEYWORD(short)
KEYWORD(ushort)
KEYWORD(int)
KEYWORD(uint)
KEYWORD(long)
KEYWORD(ulong)
KEYWORD(longlong)
KEYWORD(ulonglong)

// integer types with fixed size 
KEYWORD(i8)
KEYWORD(u8)
KEYWORD(i16)
KEYWORD(u16)
KEYWORD(i32)
KEYWORD(u32)
KEYWORD(i64)
KEYWORD(u64)

TOKEN_REGEX(gap, R"([ \n\t\v]+)")
TOKEN_REGEX(comment, R"((#[^\n]*\n)+)")
TOKEN_REGEX(identifier, "[_a-zA-Z][_a-zA-Z0-9]*")

PUNCTUATOR(l_brace, "{")
PUNCTUATOR(r_brace, "}")
PUNCTUATOR(l_paren, "(")
PUNCTUATOR(r_paren, ")")
PUNCTUATOR(l_square, "[")
PUNCTUATOR(r_square, "]")
PUNCTUATOR(period, ".")
PUNCTUATOR(colon, ":")
PUNCTUATOR(semi, ";")

// TOKEN_REGEX(numeric_literal, "[0-9]+")
// TOKEN_REGEX(char_literal, "'[^']'")
// TOKEN_REGEX(string_literal, R"("(\\"|[^"])*")")

// TOKEN_REGEX(test1, "ab")
// TOKEN_REGEX(test2, "ab|cd")
// TOKEN_REGEX(test3, "ab|ad")
// TOKEN_REGEX(test4, "ab|ad|")
// TOKEN_REGEX(test5, "||")
// TOKEN_REGEX(test6, "")

// TOKEN_REGEX(test7, "a(bc)d")
// TOKEN_REGEX(test8, "a(b|c|)d")
// TOKEN_REGEX(test9, "a(||)d")
// // TOKEN_REGEX(test10, "(")
// // TOKEN_REGEX(test11, ")")

// TOKEN_REGEX(test12, "a?b")
// TOKEN_REGEX(test13, "ab?c")
// TOKEN_REGEX(test14, "(ab)?c")
// TOKEN_REGEX(test15, "a*b")
// TOKEN_REGEX(test16, "ab*c")
// TOKEN_REGEX(test17, "(ab)*c")

// TOKEN_REGEX(test18, "ab+c")
// TOKEN_REGEX(test19, "a(bbb)+c")

// TOKEN_REGEX(test20, "[a]")
// TOKEN_REGEX(test21, "ab|[ab]*")
// TOKEN_REGEX(test22, "[a-d]")
// // TOKEN_REGEX(test23, "[d-a]")
// // TOKEN_REGEX(test24, "[d-\\n]")
// TOKEN_REGEX(test24, "[a-zA-Z]")

// TOKEN_REGEX(test25, "ab|ac|ad|bb|bc|bd")
// TOKEN_REGEX(test26, "[ab][b-d]")

// TOKEN_REGEX(test27, "[^a]*")

// TOKEN_REGEX(test28, "ad")
// TOKEN_REGEX(test29, "bd|cd")
// // TOKEN_REGEX(test30, "ad|bd|cd")

// TOKEN_REGEX(test31, "ab")
// TOKEN_REGEX(test32, "cd")
// // TOKEN_REGEX(test33, "ab|cd")

// TOKEN_REGEX(test34, "a|aa")
// TOKEN_REGEX(test35, "a|aaa")
// // TOKEN_REGEX(test36, "aa")
// // TOKEN_REGEX(test37, "a+")

#undef PUNCTUATOR
#undef KEYWORD
#undef TOKEN_REGEX
#undef TOKEN
#undef TOK
